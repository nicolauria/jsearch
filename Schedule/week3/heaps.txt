Heaps are a type of tree that are useful for priority queues. They are unique
in that one very efficient way to implement them is with an array. They are
especially useful for extracting a min/max value from a set of data.

Heaps are just binary trees with two additional rules. They must be complete,
meaning all levels must be filled except the last which must still be left to right.
They must also have all their nodes in order:
min-heap -> parent node less than or equal to child node
max-heap -> parent node greater than or equal to child node

when growing a heap we can only ever add a node to the left-most spot
we can then swap nodes so we are not violating our ordering property

when removing an element, say the root, we take the bottom right most
node and move it to the top then compare children and continue swapping with
the larger node

we can use an array to model a heap
if parent = i
left child = 2i + 1
right child = 2i + 2
to determine parent of i = Math.floor(i - 1) / 2

we store the data in an array so it can be used with a queue
in a priority queue, each node has a numerical value that represents
the nodes priority

finding the max value in binary heap is BigO(1)
removing or adding is BigO(log n)
